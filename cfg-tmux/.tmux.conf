dark=$blue
lite=$silver

## set {{{
set  -g status "on"
set  -g status-bg $bg
set  -g status-fg $bg
# set  -g status-style none  ## ,dim,bold,bright,none
set  -g status-interval 2
set  -g status-left-length 1000
set  -g status-position top
set  -g default-terminal "tmux-256color"
## |                    .- xterm-256color  ## works for italic
## |                    |- tmux
## '--> other options --|- tmux-256color  ## works for italic
##                      |- screen
##                      '- screen-256color  ## previously used (before italic)

set  -s escape-time 5000          ## allows for faster key repetition
set  -g repeat-time 0             ## allow the arrow key to be used immediately after changing windows
set  -g renumber-windows on       ## renumber windows when a window is closed
set  -g base-index 1              ## start windows numbering at 1
set  -g display-time 3000         ## display message time
set  -g display-panes-time 3000   ## display panes time
set  -g clock-mode-colour $dark
set  -g clock-mode-style 12  ## 24
set  -g message-style fg=$yellow  ## bg=$red
set  -g status-justify left  ## align window list
set  -g history-limit 50000
setw -g aggressive-resize on  ## fix being limited by the smallest screen resolution on all screens when using the same session on multiple screens
setw -g pane-base-index 1  ## start pane numbering at 1
setw -g automatic-rename on  ## rename window to reflect current program
setw -g window-status-separator " "
# setw -g mode-style 'fg=colour255 bg=colour5 bold'
# set -g set-titles-string "#T"   ## will display user@host:*****
# set -g set-titles on            ## set terminal title
# setw -g monitor-activity off
# set -g visual-activity off
# set -g mouse-select-pane on
# set -g mouse-select-window on
# setw -g mode-mouse on
## }}}
## window {{{
## inactive window
set-window-option -g window-status-style          fg=$grey_dark,bg=default
set-window-option -g window-status-format         '#{=/5/~:window_name}'
## active window
set-window-option -g window-status-current-style  fg=$dark,bg=default
set-window-option -g window-status-current-format '#{window_name}'

## ?? (https://github.com/potamides/dotfiles/blob/master/.tmux.conf)
set-window-option -g window-status-activity-style bg=colour37
set-window-option -g window-status-activity-style fg=colour118
## }}}
## pane {{{
set  -g display-panes-colour        $grey          ## inactive pane color when display panes is triggered
set  -g display-panes-active-colour $dark          ## active pane color when display panes is triggered
set  -g pane-border-style           fg=$grey_dark  ## inactive pane border
set  -g pane-active-border-style    fg=$dark       ## active pane border
# set  -g pane-border-status top  ## bottom
#set  -g pane-border-format ' \
##([ ! #{pane_current_command} == "lf" ] && { cd #{pane_current_path}; $HOME/scripts/tmux-statusline pwd ;} || echo "·") \
#── \
##(cd #{pane_current_path}; $HOME/scripts/tmux-statusline info) \
#── \
##(cd #{pane_current_path}; $HOME/scripts/tmux-statusline git) '
## }}}
## resurrect {{{
## path to save resurrect environments
set -g @resurrect-dir '$HOME/.tmux-resurrect-saved-environments'
## }}}
## prefix_highlight {{{
set -g @prefix_highlight_fg $black  ## default 'colour231'
set -g @prefix_highlight_bg $green  ## default 'colour04'
set -g @prefix_highlight_show_copy_mode 'on'
set -g @prefix_highlight_copy_mode_attr 'fg=black,bg=yellow'  ## default 'fg=default,bg=yellow'
set -g @prefix_highlight_show_sync_mode 'on'
set -g @prefix_highlight_sync_mode_attr 'fg=black,bg=magenta' ## default 'fg=default,bg=yellow'
set -g @prefix_highlight_prefix_prompt  'PREFIX'
set -g @prefix_highlight_copy_prompt    'COPY'
set -g @prefix_highlight_sync_prompt    'SYNC'
## }}}
## statuline {{{
set  -g status-left  "#{prefix_highlight}"
set -ag status-left  "#[fg=$dark,   bg=$bg,nobold] "
set -ag status-left  "#[fg=$yellow, bg=$bg,nobold]#($HOME/scripts/tmux-statusline if_sony)"
set -ag status-left  "#[fg=$purple, bg=$bg,nobold]#($HOME/scripts/tmux-statusline if_ssh)"
set -ag status-left  "#[fg=$cyan,   bg=$bg,nobold]#{?mouse,MOUSE ,}"
set -ag status-left  "#[fg=$dark,   bg=$bg,nobold]#(cd #{pane_current_path}; $HOME/scripts/tmux-statusline pwd)"
set -ag status-left  "#[fg=$dark,   bg=$bg,nobold] "
set -ag status-left  "#[fg=$lite,   bg=$bg,nobold]#(cd #{pane_current_path}; $HOME/scripts/tmux-statusline info)"
set -ag status-left  "#[fg=$dark,   bg=$bg,nobold] "
set -ag status-left  "#[fg=$dark,   bg=$bg,nobold]#(cd #{pane_current_path}; $HOME/scripts/tmux-statusline git)"
set -ag status-left  "#[fg=$lite,   bg=$bg,nobold] "
set -ag status-left  '#[fg=$lite,   bg=$bg,nobold]#S/#(wc -l <<< "$(tmux list-sessions)")'
set -ag status-left  "#[fg=$dark,   bg=$bg,nobold] "
set  -g status-right "#[fg=$dark,   bg=$bg,nobold]"
# }}}
## binds {{{
# set prefix
set -g prefix C-a
unbind-key C-b
bind-key C-a send-prefix

## toggle synchronise panes
bind C-x setw synchronize-panes

setw -g mode-keys vi
bind -T copy-mode-vi v   send-keys -X begin-selection
## https://www.freecodecamp.org/news/tmux-in-practice-integration-with-system-clipboard-bcd72c62ff7b/:
bind -T copy-mode-vi C-y send-keys -X copy-pipe-and-cancel "xclip -i -f -selection primary | xclip -i -selection clipboard" \; display-message "Copied to clipboard"

#bind l new-window -n "lf" "lf"

bind r source-file $HOME/.tmux.conf \; display-message "Sourced and reloaded"
bind p display-panes  ## display panes numbers
bind o kill-session -a ## kill other sessions
bind n new   ## new session
bind m set-option -g mouse \; display "Mouse: #{?mouse,ON,OFF}"
bind k kill-server
## switch to window
bind -n C-Left  previous-window  ## OR :select-window -t :-  --,--> you can bind these two like this: -,->  bind -r [ select-window -t :-  -,-> but bind -r means prefix is required before [ or ]
bind -n C-Right next-window      ## OR :select-window -t :+  --'                                       '->  bind -r ] select-window -t :+  -'

## new pane
bind Right split-window -h # -c '#{pane_current_path}'
bind Down  split-window -v # -c '#{pane_current_path}'
## switch to pane
bind -n C-S-Left  select-pane -L
bind -n C-S-Right select-pane -R
bind -n C-S-Up    select-pane -U
bind -n C-S-Down  select-pane -D
## resize pane
bind -n C-M-Left  resize-pane -L 5
bind -n C-M-Right resize-pane -R 5
bind -n C-M-Up    resize-pane -U 5
bind -n C-M-Down  resize-pane -D 5
# }}}
## run-shell {{{
## keep thesee at the very bottom
run-shell $HOME/.tmux-plugins/tmux-prefix-highlight/prefix_highlight.tmux
run-shell $HOME/.tmux-plugins/tmux-copycat/copycat.tmux
run-shell $HOME/.tmux-plugins/tmux-resurrect/resurrect.tmux
## }}}

# tmux list-commands
## NOTES {{{

## https://stackoverflow.com/questions/60106672/prevent-tmuxs-pane-title-from-being-updated
# [ -n "$TMUX" ] && tmux set -p @mytitle "foo"
# set -g pane-border-format "#{@mytitle}"

## #{?mouse,MOUSE-ON,MOUSE-OFF}"

## change pane fg anf bg
# select-pane -t:.1 -P 'fg=blue,bg=red'

## https://gist.github.com/dusenberrymw/638359ea1ce409a2232375edb4a99948
# x:y.z  ## x = session, y is wondow, z is pane

## dump live tmux buffer to a file (https://gist.github.com/dusenberrymw/638359ea1ce409a2232375edb4a99948)
# :capture-pane -S -32768 ; save-buffer FILENAME_HERE   ## save at least the last 32,768 lines from the buffer

## smart pane switching with awareness of vim splits (https://github.com/christoomey/vim-tmux-navigator)
# is_vim="ps -o state= -o comm= -t '#{pane_tty}' | grep -iqE '^[^TXZ ]+ +(\\S+\\/)?g?(view|n?vim?x?)(diff)?$'"
# bind-key -n 'C-h' if-shell "$is_vim" 'send-keys C-h'  'select-pane -L'
# bind-key -n 'C-j' if-shell "$is_vim" 'send-keys C-j'  'select-pane -D'
# bind-key -n 'C-k' if-shell "$is_vim" 'send-keys C-k'  'select-pane -U'
# bind-key -n 'C-l' if-shell "$is_vim" 'send-keys C-l'  'select-pane -R'

## logging (https://github.com/kamiyamak/tmux/blob/master/.tmux.conf)
## C-b C-p Start logging
# bind-key C-p pipe-pane -o '/bin/sh -c "while read -r LINE; do echo \"[\$(date +\"%%Y_%%m%%d_%%H%%M%%S_%%N\")] \${LINE}\" >> \${HOME}/.tmux/log/\$(date +%Y%m%d-%H%M%S)-#S-#I.#P.log; done "' \; display-message "Logging start."
## C-b C-o Stop logging
# bind-key C-o pipe-pane \; display-message "Logging end."

## #P                      returns pane index (e.g. 1)
## #{pane_index}           returns pane index (e.g. 1)
## #T                      returns pane title (e.g. nnnn@acer:/home/nnnn/downloads)
## #{pane_title}           returns pane title (e.g. nnnn@acer:/home/nnnn/downloads)
## #I                      returns window index (e.g. 1)
## #W                      returns window name (e.g. run)
## #S                      returns session name/index (e.g. 1, sh, py, etc)
## #{pane_current_command} returns vim,lf,etc
## #{pane_current_path}    returns /home/nnnn/downloads
## #{pane_pid}             returns 252057
## #{window_name}          returns 0-test
## #{window_active}        returns 0 if not active, is empty if active
## #H                      returns acer
## vv https://unix.stackexchange.com/questions/564618/set-tmux-pane-title-to-user-defined-if-exists-else-current-working-file-or-dire:
## setw -g pane-border-format ' #{=/15/…:pane_title} [#{=/-20/…:pane_current_command}] #(pgrep -P "#{pane_pid}" | tr "\n" " ")#{pane_current_path} #{?alternate_on,<Alt Mode> ,}'
## }}}
