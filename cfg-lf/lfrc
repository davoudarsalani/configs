## set {{{
set ifs "\n"  ## NOTE do NOT replace " with '
set shell bash
set previewer ~/main/scripts/previewer  ## do NOT replace ~ with $HOME
set info size
set icons true
set number true
set relativenumber true
set incsearch true
set timefmt "2006-01-02 15:04:05 -0700 Mon"  ## ORIG: "Mon Jan _2 15:04:05 2006"
set errorfmt "\033[0;49;31m%s\033[0m"    ## NOTE JUMP_2 do NOT replace \033 and " with \e and ' respectively
set promptfmt " 
\033[38;5;247m\033[48;5;237m %u@%h \033[38;5;237m\033[48;5;235m
\033[38;5;247m\033[48;5;235m %w/%f \033[0m\033[38;5;235m\033[0m
"  ## JUMP_2 https://github.com/rafi/.config/blob/master/lf/lfrc
## previously: set promptfmt "\033[0;49;90m %f\033[0m"  ## JUMP_2
set wrapscroll true
set scrolloff 5
set dircounts true
set period 1
set shellopts "-e"  ## for shell commands.
                    ## "-e" to exit on error.
                    ## "-u" to give error for unset variables.
                    ## "-f" disables pathname expansion which can be useful when $f, $fs, and $fx variables contain names with '*' or '?' characters.
                    ## However, this option is used selectively within individual commands as it can be limiting at times.

set ratios 1:2
## ^^vv after updating to 26-1, the following group screws pane size and shows panes in 3:1 ratio.
##      so we have to comment that and use the line below
##      also it screws groups mapped to w and W in JUMP_1
# % {{
    ## ratios
    # width=$(tput cols)
    # [ $width -le 88 ] && lf -remote "send $id set ratios 1:1" || lf -remote "send $id set ratios 1:2"
# }}

% {{
    [ $LF_LEVEL -eq 1 ] || lf -remote "send $id echoerr 'WARNING: You are in a nested lf instance!'"
}}
## }}}
## unmap {{{
map '~'
map '`'
# map "'"
map '"'
map ';'
map ','
map ?
map <f-1>
map <enter>
map <right>
map <left>
map <lt>
map <gt>
map a
map b
map c
# map d
map e
map f
# map g
# map h
map i
# map j
# map k
# map l
# map m
# map n
map o
# map p
map q
map r
map s
map t
map u
# map v
map w
map x
# map y
map z
map F
## }}}
## highlight {{{
map i $ {{
    eval "${HIGHLIGHT/--line-range=* }" $f 2>/dev/null | less -R  ## do NOT replace 2 with &
}}
## }}}
## quit {{{
map q % {{
    > /tmp/lf_preview_status
    lf -remote "send $id clear"
    lf -remote "send $id unselect"
    lf -remote "send $id reload"
    lf -remote "send $id quit"
}}
## }}}
## toggle preview {{{
map w % {{  ## JUMP_1
    lf_preview_status_file=/tmp/lf_preview_status
    case "$(cat "$lf_preview_status_file")" in
        hide )  ## display preview
               width=$(tput cols)
               [ $width -gt 88 ] && lf -remote "send $id set ratios 1:2" || lf -remote "send $id set ratios 1:1"
               lf -remote "send $id set preview!"
               printf '%s\n' 'display' > "$lf_preview_status_file" ;;
         * )   ## hide preview
               lf -remote "send $id set preview!"
               lf -remote "send $id set ratios 1"
               printf '%s\n' 'hide' > "$lf_preview_status_file" ;;
    esac
}}
map W % {{  ## JUMP_1
    > /tmp/lf_preview_status
}}
## }}}
## mkdir, touch, rm, trash {{{
## mkdir
## 1:
# map [ push %mkdir<space>
## 2:
# cmd mkdir $ {{
#   echo -ne '\e[38;5;64m dir name \e[0m'
#   read dirname
#   mkdir -p "$dirname"
#   sleep 1
#   lf -remote "send $id select \"$dirname\""
# }}
# map m mkdir
## 3:
cmd mkdir $ {{
    mkdir "$@"
    lf -remote "send $id select \"$@\""
}}
## touch
## 1:
# map ] push %touch<space>
## 2:
# cmd touch $ {{
#   echo -ne '\e[38;5;64m file name \e[0m ' ; read filename
#   touch "$filename"
#   lf -remote "send $id select \"$filename\""
# }}
# map t touch
## 3:
cmd touch $ {{
    touch "$@"
    lf -remote "send $id select \"$@\""
}}
## rm
## 1:
# map <delete> delete
## 2:
# cmd delete $ {{
#   echo -ne '\e[38;5;64m Delete? \e[0m ' ; read -n 1 delete_prompt ; printf '\n'
#   case "$delete_prompt" in
#       y|$RETURN ) rm -rf $fx ;;
#       * ) exit ;;
#   esac
# }}
# map <delete> delete
## 3:
# cmd rm   $ rm     $fx
# cmd rmf  $ rm -f  $fx
# cmd rmr  $ rm -r  $fx
# cmd rmrf $ rm -rf $fx

## trash
## 1:
# cmd trash $ {{
#   echo -ne '\e[38;5;64m Trash? \e[0m ' ; read -n 1 trash_prompt ; printf '\n'
#   printf '\n'
#     case "$trash_prompt" in
#       y|$RETURN ) ~/main/scripts/lf.py trash $fx ;;
#       * )         exit ;;
#     esac
# }}
# map ~ trash # ~ is Shift+Delete
## }}}
## bulk_rename {{{
cmd bulk_rename $ {{
    old=$(mktemp)
    new=$(mktemp)
    [ -n $fs ] 2>/dev/null && fs=$(ls)
    printf "$fs\n" > $old
    printf "$fs\n" > $new
    $editor $new
    [ $(cat $new | wc -l) -ne $(cat $old | wc -l) ] && exit
    paste $old $new | while read names; do
        src=$(printf $names | cut -f1)
        dst=$(printf $names | cut -f2)
        [ $src = $dst ] && continue
        [ -e $dst ] && continue
        mv $src $dst
    done
    rm $old $new
    lf -remote "send $id unselect"
}}
## }}}
## du {{{
cmd du $ {{
    du -hsx * | sort -rh | less -R  ## https://github.com/rafi/.config/blob/master/lf/lfrc
    ## previously:
    ##   du -h --max-depth=1 --apparent-size | sort -rh | less -R  ## do NOT add s to -h because it conflicts with --max-depth=1
}}
## }}}
## open {{{
cmd open $ {{
    case $f in
        *gpg ) exit ;;
    esac

    case "$(file --mime-type $f -bL)" in
        audio/* )            ## [CHECKING_HOST]
                             if [ "$HOSTNAME" == 'acer' ]; then
                                 audacious $fx &>/dev/null &
                             else
                                 vlc -f --play-and-exit -- $fx &>/dev/null &
                             fi ;;
        video/* )                vlc -f --play-and-exit -- $fx &>/dev/null & ;;
        text/* )                 $editor $fx ;;  ## NOTE do NOT redirect
        application/json )       $editor $fx ;;
        application/javascript ) $editor $fx ;;
        application/csv )        $editor $fx ;;
        message/news )           $editor $fx ;;
        */octet-stream )         libreoffice $fx &>/dev/null & ;;
        application/msword )     libreoffice $fx &>/dev/null & ;;
        */*spreadsheet* )        libreoffice $fx &>/dev/null & ;;
        */*officedocument* )     libreoffice $fx &>/dev/null & ;;
        */*opendocument*   )     libreoffice $fx &>/dev/null & ;;
        */pdf )                  xreader $fx &>/dev/null & ;;
        image/* )                gpicview $fx &>/dev/null & ;;
        */*tar )                 exit ;;
        */gzip )                 exit ;;
        *bzip2 )                 exit ;;
        */zip )                  exit ;;
        */*rar )                 exit ;;
        */*iso*image )           exit ;;
        * )                      lf -remote "send $id open_with" ;;
        # * ) for f in $fx; do setsid $OPENER $f &>/dev/null & done ;;
    esac
}}
## }}}
## open_with {{{
map o open_with
cmd open_with $ {{
    source "$HOME"/main/scripts/gb-color
    num_color='blue'

    if [ -f "$f" ]; then
        case "$(file --mime-type $f -bL)" in
            audio/*|video/* ) read -n 1 -p "$(olive 'open with') $($num_color '1') audacious $($num_color '2') vlc $($num_color '3') vlc (no audio) $($num_color '4') mpv " media_app
                              printf '\n'
                              case "$media_app" in
                                  1 ) audacious $fx &>/dev/null & ;;
                                  2 ) vlc -f --play-and-exit -- $fx &>/dev/null & ;;
                                  3 ) vlc -f --play-and-exit --no-audio -- $fx &>/dev/null & ;;
                                  4 ) mpv $fx &>/dev/null & ;;
                                  q ) exit ;;
                                  * ) lf -remote "send $id open_with_other" ;;
                              esac ;;
            text/*|application/json|application/javascript|application/csv|message/news|*/octet-stream|application/msword|*/*spreadsheet*|*/*officedocument*|*/*opendocument* )
                                read -n 1 -p "$(olive 'open with') $($num_color '1') sublime $($num_color '2') gedit $($num_color '3') nano $($num_color '4') vim $($num_color '5') vi $($num_color '6') libreoffice $($num_color 'o') vim (in new window) " text_app
                                printf '\n'
                                case "$text_app" in
                                    1 ) subl $fx &>/dev/null & ;;
                                    2 ) gedit $fx &>/dev/null & ;;
                                    3 ) nano $fx ;;  ## NOTE do NOT redirect
                                    4 ) vim $fx ;;  ## NOTE do NOT redirect
                                    5 ) vi $fx ;;  ## NOTE do NOT redirect
                                    6 ) libreoffice $fx &>/dev/null & ;;
                                    o ) SESS="$(tmux display-message -p '#S')"  ## current seesion name, e.g. 1, etc
                                        DEST_WIN='XXX'  ## <--,-- no need to find base for name of new window
                                                        ##    '-- because vim is told to automaticcally rename tmux window upon opening files
                                        ## create window:
                                        tmux new-window -n "$DEST_WIN"  ## add -d to prevent from jumping to $DEST_WIN
                                        ## send command:
                                        tmux send-key -t ${SESS}:${DEST_WIN} "vim $fx" ENTER ;;
                                    q ) exit ;;
                                    * ) lf -remote "send $id open_with_other" ;;
                                esac ;;
            */pdf ) read -n 1 -p "$(olive 'open with') $($num_color '1') xreader $($num_color '2') firefox $($num_color '3') chromium " pdf_app
                    printf '\n'
                    case "$pdf_app" in
                        1 ) xreader $fx &>/dev/null & ;;
                        2 ) firefox $fx &>/dev/null & ;;
                        3 ) chromium $fx &>/dev/null & ;;
                        q ) exit ;;
                        * ) lf -remote "send $id open_with_other" ;;
                    esac ;;
            image/* ) read -n 1 -p "$(olive 'open with') $($num_color '1') gpicview $($num_color '2') firefox $($num_color '3') chromium $($num_color '4') gimp " image_app
                      printf '\n'
                      case "$image_app" in
                          1 ) gpicview $fx &>/dev/null & ;;
                          2 ) firefox $fx &>/dev/null & ;;
                          3 ) chromium $fx &>/dev/null & ;;
                          4 ) gimp $fx &>/dev/null & ;;
                          q ) exit ;;
                          * ) lf -remote "send $id open_with_other" ;;
                      esac ;;
            * ) lf -remote "send $id open_with_other" ;;
        esac
    elif [ -d "$f" ]; then
        read -n 1 -p "$(olive 'open') $($num_color 'o') (in new window) " dir_open
        printf '\n'
        case "$dir_open" in
            o ) SESS="$(tmux display-message -p '#S')"  ## current seesion name, e.g. 1, etc
                base="${fx##*/}"  ## downloads
                base="${base%/}"  ## remove possible trailing /
                base="${base#.}"  ## <--,-- remove leading . to prevent the error: can't find pane: downloads
                                  ##    '-- which occurs for hidden dirs
                DEST_WIN="$base"
                ## create window:
                tmux new-window -n "$base"
                ## send command:
                tmux send-key -t ${SESS}:${DEST_WIN} "\lf $f" ENTER ;;
        esac
    fi
}}
## }}}
## open_with_other {{{
cmd open_with_other $ {{
    source "$HOME"/main/scripts/gb-color
    # num_color='blue'

    read -p "$(olive 'open with') " other_app
    case "$other_app" in
        q ) exit ;;
        * ) "$other_app" $fx ;;  ## NOTE do NOT add &>/dev/null &
    esac
}}
## }}}
## fzf_select {{{
map <c-t> fzf_select
cmd fzf_select $ {{
    source "$HOME"/main/scripts/gb

    file="$(select_file)" || exit 37
    lf -remote "send $id select \"$file\"" && \
    lf -remote "send $id save_pwd_as_recent_directory"
}}
## }}}
## fzf_cd {{{
map <a-c> fzf_cd
cmd fzf_cd $ {{
    source "$HOME"/main/scripts/gb

    directory="$(select_directory)" || exit 37
    lf -remote "send $id cd \"$directory\"" && \
    lf -remote "send $id save_pwd_as_recent_directory"
}}
## }}}
## fzf_recent_directories {{{
map <a-r> fzf_recent_directories
cmd fzf_recent_directories $ {{
    source "$HOME"/main/scripts/gb

    recent_dirs_file=/tmp/lf_recent_directories  ## JUMP_3

    if [ -f "$recent_dirs_file" ]; then

        ## '1!G;h;$!d' to reverse lines
        ## NOTE <--,-- do NOT replace quotes in '1!G;h;$!d' and "s|$HOME|\~|g"
        ##         '-- do NOT replace | with / in "s|$HOME|\~|g"
        readarray -t recent_dirs < <(sed -e '1!G;h;$!d' -e "s|$HOME|\~|g" "$recent_dirs_file" )

        directory="$(pipe_to_fzf "${recent_dirs[@]}" "header=recent directories")" || exit 37
        lf -remote "send $id cd \"$directory\""
    else
        lf -remote "send $id echoerr ' no recent directories'"
    fi
}}
## }}}
## {{{ git_restore
map gr git_restore
cmd git_restore $ {{
    source "$HOME"/main/scripts/gb

    prompt="$(get_single_input "restore ${f##*/}?")" && printf '\n'
    case "$prompt" in
        y ) source "$HOME"/main/scripts/gb-git
            git_restore_specific_or_pattern "${f%/*}" "${f##*/}" && \
            lf -remote "send $id echo \" ${f##*/} restored\"" ;;
    esac
}}
## }}}
cmd save_pwd_as_recent_directory $ {{  ## {{{
    source "$HOME"/main/scripts/gb
    recent_dirs_file=/tmp/lf_recent_directories  ## JUMP_3

    \grep -q "$PWD" "$recent_dirs_file" 2>/dev/null ||
    printf '%s\n' "$PWD" >> "$recent_dirs_file"
}}
## }}}
## commands {{{
map <c-c> commands
cmd commands $ {{
    source "$HOME"/main/scripts/gb
    source "$HOME"/main/scripts/gb-color

    files_dirs=( ${fx// /+} )  ## <--,-- NOTE do NOT quote ${fx}
                               ##    '-- replace space with + to avoid problems in parsing names

    files_dirs=( "${files_dirs[@]##*/}" )
    files_color='brown'

    if (( "${#files_dirs[@]}" == 1 )); then
        header="selected: $($files_color ${files_dirs[@]##*/})"
    else
        files_dirs=( "${#files_dirs[@]} selected:" ' ' "${files_dirs[@]}" )  ## ' ' to use it as separator when printing file names in JUMP_2
        header="$(printf '%s\n' "${files_dirs[0]}")$($files_color $(printf '%s\n' "${files_dirs[@]:1}"))"  ## JUMP_2
    fi

    items=( 'chattr' 'trash' 'rm' 'mime_type' 'softlink' 'compress_tar' 'compress_gz' 'compress_zip' 'compress_rar' 'xtract_tar' 'xtract_gz' 'xtract_zip' 'xtract_rar' 'du' 'mkdir' 'touch' 'bulk_rename' 'rename')
    item="$(pipe_to_fzf "${items[@]}" "header=$header")" || exit 37
    case "$item" in
        chattr )       "$HOME"/main/scripts/lf.py chattr    $fx ;;
        trash )        "$HOME"/main/scripts/lf.py trash     $fx ;;
        rm )           "$HOME"/main/scripts/lf.py rm        $fx ;;
        mime_type )    "$HOME"/main/scripts/lf.py mime_type $fx ;;
        softlink )     "$HOME"/main/scripts/lf.py softlink  $fx ;;
        compress_tar ) "$HOME"/main/scripts/lf.py tar       $fx ;;
        compress_gz )  "$HOME"/main/scripts/lf.py gz        $fx ;;
        compress_zip ) "$HOME"/main/scripts/lf.py zip       $fx ;;
        compress_rar ) "$HOME"/main/scripts/lf.py rar       $fx ;;
        xtract_tar )   "$HOME"/main/scripts/lf.py untar     $fx ;;
        xtract_gz )    "$HOME"/main/scripts/lf.py ungz      $fx ;;
        xtract_zip )   "$HOME"/main/scripts/lf.py unzip     $fx ;;
        xtract_rar )   "$HOME"/main/scripts/lf.py unrar     $fx ;;
        du )           lf -remote "send $id du"                 ;;
        mkdir )        lf -remote "send $id push :mkdir<space>" ;;  ## <--,-- used push for the cmd to read my input
        touch )        lf -remote "send $id push :touch<space>" ;;  ## <--'
        bulk_rename )  lf -remote "send $id bulk_rename"        ;;
        rename )       lf -remote "send $id rename"             ;;
    esac
}}
## }}}
## map {{{
map <tab>   :clear ; unselect ; reload
map <enter> :open  ; unselect ; save_pwd_as_recent_directory
map <right> :open  ; unselect ; save_pwd_as_recent_directory
map <left>  :updir ; unselect
map .       :set hidden!
map '`'     mark-load  ## FIXME add save_pwd_as_recent_directory here too
map ';'     read

## https://github.com/rafi/.config/blob/master/lf/lfrc
map r<right> &tmux split-window -h \lf  ## replicate horizontally
map r<down>  &tmux split-window -v \lf  ## replicate vertically
## }}}
